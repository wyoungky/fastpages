{
  
    
        "post0": {
            "title": "Title",
            "content": "Import packages . import pandas as pd import numpy as np import os import copy import matplotlib.pyplot as plt from colour import Color import altair as alt %config InlineBackend.figure_format = &#39;retina&#39; from ipywidgets import interact, interactive, fixed, interact_manual import ipywidgets as widgets from IPython.display import clear_output pd.set_option(&#39;display.max_columns&#39;, 50) pd.set_option(&#39;display.max_rows&#39;, None) . Import data . # FETCH url = &#39;https://raw.githubusercontent.com/wyoungky/Happiness-Index/master/data/world-happiness/&#39; file_name = [&#39;2015.csv&#39;, &#39;2016.csv&#39;, &#39;2017.csv&#39;, &#39;2018.csv&#39;, &#39;2019.csv&#39;] number = 0 for file in file_name: info_temp = pd.read_csv(url + file) ## get date of the record. info_temp[&#39;Year&#39;] = file.split(&quot;.&quot;)[0] if number == 0: happiness_data = copy.deepcopy(info_temp) number += 1 else: happiness_data = pd.concat([happiness_data,info_temp], sort=True) . Exploratory Analysis . # pivot to get yearly value happiness_data_yearly = (happiness_data.pivot_table(index=[&#39;Country&#39;,&#39;Region&#39;], columns=&#39;Year&#39;, values=&#39;Happiness Score&#39;) .rename_axis(None, axis=1) .reset_index()) # fill from previous years, if cannot, fill from following years column_to_rank = [2015, 2016, 2017, 2018, 2019] # calculate rank for year in column_to_rank: # calculate rank new_col_name_rank = &quot;rank_&quot; + str(year) rank = happiness_data_yearly[str(year)].rank(ascending=False) happiness_data_yearly[new_col_name_rank] = rank # calculate average rank rank_col = [col for col in happiness_data_yearly if col.startswith(&#39;rank&#39;)] happiness_data_yearly[&quot;avg_rank&quot;] = happiness_data_yearly[rank_col].mean(axis=1).round(1) # calculate score change # calculate rate of change # calculate rank change for year in column_to_rank[:-1]: year_later_list = [i for i in column_to_rank if i &gt; year] for year_later in year_later_list: # calculate rank change new_col_name_s = &quot;rank_&quot; + str(year) + &quot;_&quot; + str(year_later) score_change = ((happiness_data_yearly[&quot;rank_&quot; + str(year)] -happiness_data_yearly[&quot;rank_&quot; + str(year_later)])) happiness_data_yearly[new_col_name_s] = score_change # calculate score change new_col_name_s = &quot;score_&quot; + str(year) + &quot;_&quot; + str(year_later) score_change = ((happiness_data_yearly[str(year_later)] -happiness_data_yearly[str(year)])).round(3) happiness_data_yearly[new_col_name_s] = score_change happiness_data_yearly.rename(columns={&#39;2015&#39;:&quot;score_2015&quot;, &#39;2016&#39;:&quot;score_2016&quot;, &#39;2017&#39;:&quot;score_2017&quot;, &#39;2018&#39;:&quot;score_2018&quot;, &#39;2019&#39;:&quot;score_2019&quot;}, inplace=True) . Plot Charts . def altair_chart(df, col_x, col_y): altair_data = copy.deepcopy(df) altair_data[&#39;guideline&#39;] = np.arange(len(altair_data))/(len(altair_data)-1)*6+2 chart = alt.Chart(altair_data) selection1 = alt.selection_multi(fields=[&#39;Region&#39;], bind=&#39;legend&#39;) selection2 = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Country&#39;]) xscale = alt.Scale(domain=(2.0, 8.0)) yscale = alt.Scale(domain=(2.0, 8.0)) scatter = chart.mark_point().encode( alt.X(col_x, scale = xscale), alt.Y(col_y, scale = yscale), color=alt.condition(selection2,&#39;Region:N&#39;,alt.value(&#39;lightgray&#39;),scale=alt.Scale(scheme=&#39;tableau20&#39;)), tooltip=[&#39;Country&#39;, col_x, col_y], opacity=alt.condition(selection1, alt.value(1), alt.value(0.2)) ).add_selection( selection1, selection2 ).properties( height=500, width=500 ) xmean = chart.mark_rule().encode( x=&#39;mean(&#39; + col_x + &#39;):Q&#39;, size=alt.value(0.1), color=alt.value(&#39;blue&#39;) ).transform_filter( selection1 | selection2 ) text_xmean = chart.mark_text( text=&#39;mean&#39;, angle=270, align=&#39;left&#39;, baseline=&#39;bottom&#39;, opacity=0.5, color=&quot;blue&quot; ).encode( x=&#39;mean(&#39; + col_x + &#39;):Q&#39;, y=alt.value(490) ).transform_filter( selection1 | selection2 ) ymean = chart.mark_rule().encode( y=&#39;mean(&#39; + col_y + &#39;):Q&#39;, size=alt.value(0.1), color=alt.value(&#39;blue&#39;) ).transform_filter( selection1 | selection2 ) text_ymean = chart.mark_text( text=&#39;mean&#39;, angle=0, align=&#39;left&#39;, baseline=&#39;bottom&#39;, opacity=0.5, color=&quot;blue&quot; ).encode( x=alt.value(10), y=&#39;mean(&#39; + col_y + &#39;):Q&#39; ).transform_filter( selection1 | selection2 ) guideline = chart.mark_line(strokeDash=[10,5]).encode( alt.X(&#39;guideline&#39;, scale = xscale), alt.Y(&#39;guideline&#39;, scale = yscale), size=alt.value(0.5) ) chart2 = chart.mark_bar().encode( x=&#39;count()&#39;, y=alt.Y(col_y, bin=alt.Bin(maxbins=30, extent=yscale.domain)), color=&#39;Region:N&#39; ).transform_filter( selection1 | selection2 ).properties( height=500, width=100 ) chart3 = chart.mark_bar().encode( y=&#39;count(Country)&#39;, x=alt.X(col_x, bin=alt.Bin(maxbins=30, extent=xscale.domain)), color=&#39;Region:N&#39; ).transform_filter( selection1 | selection2 ).properties( height=100, width=500 ) return (((scatter+xmean+text_xmean+ymean+text_ymean+guideline) | chart2 ) &amp; chart3) . year=[(2015,&#39;score_2015&#39;), (2016,&#39;score_2016&#39;), (2017,&#39;score_2017&#39;), (2018,&#39;score_2018&#39;), (2019,&#39;score_2019&#39;)] w1 = widgets.Dropdown(options=year, value=&#39;score_2015&#39;, description=&#39;x-axis Year:&#39;) w2 = widgets.Dropdown(options=year, value=&#39;score_2019&#39;, description=&#39;y-axis Year:&#39;) display(w1) display(w2) display(altair_chart(happiness_data_yearly, w1.value, w2.value)) def on_change(change): global chart if change[&#39;type&#39;] == &#39;change&#39; and change[&#39;name&#39;] == &#39;value&#39;: clear_output() display(w1) display(w2) display(altair_chart(happiness_data_yearly, w1.value, w2.value)) w1.observe(on_change) w2.observe(on_change) . altair_chart(happiness_data_yearly, w1.value, w2.value) . altair_data = copy.deepcopy(happiness_data_yearly) altair_data[&#39;guideline&#39;] = np.arange(len(altair_data))/(len(altair_data)-1)*6+2 chart = alt.Chart(altair_data) selection1 = alt.selection_multi(fields=[&#39;Region&#39;], bind=&#39;legend&#39;) selection2 = alt.selection_single(empty=&#39;all&#39;, fields=[&#39;Country&#39;]) xscale = alt.Scale(domain=(2.0, 8.0)) yscale = alt.Scale(domain=(2.0, 8.0)) scatter = chart.mark_point().encode( alt.X(&#39;score_2015&#39;, scale = xscale), alt.Y(&#39;score_2019&#39;, scale = yscale), color=alt.condition(selection2,&#39;Region:N&#39;,alt.value(&#39;lightgray&#39;),scale=alt.Scale(scheme=&#39;tableau20&#39;)), tooltip=[&#39;Country&#39;, &#39;score_2015&#39;, &#39;score_2019&#39;], opacity=alt.condition(selection1, alt.value(1), alt.value(0.2)) ).add_selection( selection1, selection2 ).properties( height=500, width=500 ) xmean = chart.mark_rule().encode( x=&#39;mean(&#39; + &#39;score_2015&#39; + &#39;):Q&#39;, size=alt.value(0.1), color=alt.value(&#39;blue&#39;) ).transform_filter( selection1 | selection2 ) text_xmean = chart.mark_text( text=&#39;mean&#39;, angle=270, align=&#39;left&#39;, baseline=&#39;bottom&#39;, opacity=0.5, color=&quot;blue&quot; ).encode( x=&#39;mean(&#39; + &#39;score_2015&#39; + &#39;):Q&#39;, y=alt.value(490) ).transform_filter( selection1 | selection2 ) ymean = chart.mark_rule().encode( y=&#39;mean(&#39; + &#39;score_2019&#39; + &#39;):Q&#39;, size=alt.value(0.1), color=alt.value(&#39;blue&#39;) ).transform_filter( selection1 | selection2 ) text_ymean = chart.mark_text( text=&#39;mean&#39;, angle=0, align=&#39;left&#39;, baseline=&#39;bottom&#39;, opacity=0.5, color=&quot;blue&quot; ).encode( x=alt.value(10), y=&#39;mean(&#39; + &#39;score_2019&#39; + &#39;):Q&#39; ).transform_filter( selection1 | selection2 ) guideline = chart.mark_line(strokeDash=[10,5]).encode( alt.X(&#39;guideline&#39;, scale = xscale), alt.Y(&#39;guideline&#39;, scale = yscale), size=alt.value(0.5) ) chart2 = chart.mark_bar().encode( x=&#39;count()&#39;, y=alt.Y(&#39;score_2019&#39;, bin=alt.Bin(maxbins=30, extent=yscale.domain)), color=&#39;Region:N&#39; ).transform_filter( selection1 | selection2 ).properties( height=500, width=100 ) chart3 = chart.mark_bar().encode( y=&#39;count(Country)&#39;, x=alt.X(&#39;score_2015&#39;, bin=alt.Bin(maxbins=30, extent=xscale.domain)), color=&#39;Region:N&#39; ).transform_filter( selection1 | selection2 ).properties( height=100, width=500 ) ((scatter+xmean+text_xmean+ymean+text_ymean+guideline) | chart2 ) &amp; chart3 . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # load movies data genres = df[&#39;Major_Genre&#39;].unique() # get unique field values genres = list(filter(lambda d: d is not None, genres)) # filter out None values genres.sort() # sort alphabetically mpaa = [&#39;G&#39;, &#39;PG&#39;, &#39;PG-13&#39;, &#39;R&#39;, &#39;NC-17&#39;, &#39;Not Rated&#39;] # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Sources and Reference . Dataset: https://www.kaggle.com/unsdsn/world-happiness/data .",
            "url": "https://wyoungky.github.io/fastpages/2020/04/21/Data-Exploration.html",
            "relUrl": "/2020/04/21/Data-Exploration.html",
            "date": " • Apr 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://wyoungky.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://wyoungky.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://wyoungky.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wyoungky.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}